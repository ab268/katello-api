apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

group = 'com.redhat.qe'
version = '2.0.0'

allprojects {
   sourceCompatibility = 1.6
   targetCompatibility = 1.6
   
   sourceSets {
       main {
           groovy {
               srcDirs "src"
           }
           resources {
               srcDirs "src", "scripts"
           }
       }
       test {
           java {
               srcDirs "src"
           }
           groovy {
               srcDirs "src"
           }
       }
   }
        
   compileGroovy.groovyOptions.fork = false
   compileTestGroovy.groovyOptions.fork = false
}


configurations {
    testng
}

eclipse {
    classpath {
        defaultOutputDir = file('build')
    }
    project {
        defaultOutputDir = file('build')
    }
    project {
        file {
            whenMerged { project ->
                if ( !project.buildCommands[0].name.contains('PyDev') ) {
                    project.buildCommands = project.buildCommands.reverse()
                }
            }
        }

        natures 'org.python.pydev.pythonNature'
        buildCommand 'org.python.pydev.PyDevBuilder'
    }
}

repositories {
    flatDir dirs: ['lib']
    mavenCentral()
    [ 'https://repository.jboss.org/nexus/content/repositories/thirdparty-uploads',
      'http://clojars.org/repo',
      'http://mirrors.ibiblio.org/pub/mirrors/maven2/',
      'http://mvnrepository.com/artifact',
      'http://download.java.net/maven/2',
      'http://repository.codehaus.org',
      'http://snapshots.repository.codehaus.org' ].each { repo ->
        maven {
            url repo
        }
    }
}

dependencies {
    def httpBuilderVersion = '0.5.2'
    if ( System.properties['httpbuilder.version'] ) {
        httpBuilderVersion = System.properties['httpbuilder.version']
    }

    testCompile 'org.testng:testng:6.7','xmlunit:xmlunit:1.0'
    testRuntime 'org.slf4j:slf4j-jdk14:1.6.4'
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile 'org.testng:testng:6.7',
            'com.redhat.qe:assertions:1.0.2',
            'com.redhat.qe:logging-testscript:1.0.2',
            'com.redhat.qe:ssh-tools:1.0.0',
            'reportng:reportng:1.1.3',
            'velocity-dep:velocity-dep:1.4',
            'json_simple:json_simple:1.1'
    groovy 'org.codehaus.groovy:groovy:1.8.6'
    testng 'org.testng:testng:6.7'
}

task printClasspath << {
    println configurations.runtime.asPath
}

task printProps << {
    println System.properties
}

def TESTNG_KATELLO_DEFAULT_TESTS = "Smoke_Tests,CLI_Tests,E2E_Tests"
def TESTNG_KATELLO_SUITE = "katello-tests.xml"

task run_katello(dependsOn: 'testClasses') << {
    def testnames = System.getProperty("testng.testnames", "${TESTNG_KATELLO_DEFAULT_TESTS}")
    def workspace = System.getProperty("workspace.dir", System.getenv("WORKSPACE") ?: System.properties["user.dir"])
    def outputDir = System.getProperty("testng.outputdir", "${workspace}/test-output")

    ant.taskdef( resource: 'testngtasks', classpath: configurations.testng.asPath )
    ant.testng( classpath: sourceSets.test.runtimeClasspath.asPath, outputdir: outputDir, testnames: "${testnames}", 
      listener: 'org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter', configfailurepolicy: 'continue') {
        xmlfileset(dir: 'testng-suites', includes: "**/${TESTNG_KATELLO_SUITE}")
    }
}


